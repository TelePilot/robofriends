{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/CounterButton.js","components/Header.js","components/ErrorBoundry.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","console","log","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","CounterButton","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCount","setState","state","count","nextProps","nextState","color","onClick","Component","Header","components_CounterButton","ErrorBoundry","hasError","error","info","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","initialStateSearch","initialStateRobots","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"oRAaeA,EAXF,SAAAC,GAAuB,IAArBC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,GAE1B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,mBACrBC,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,KCYKS,EAjBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OAElB,OADAC,QAAQC,IAAI,YAERV,EAAAC,EAAAC,cAAA,WACGM,EAAOG,IAAI,SAACC,EAAMC,GACjB,OACEb,EAAAC,EAAAC,cAACY,EAAD,CACEC,IAAKF,EACLd,GAAIS,EAAOK,GAAGd,GACdF,KAAMW,EAAOK,GAAGhB,KAAMC,MAAOU,EAAOK,GAAGf,YCOtCkB,EAjBG,SAAApB,GAAiCA,EAA/BqB,YAA+B,IAAlBC,EAAkBtB,EAAlBsB,aAE/B,OADAT,QAAQC,IAAI,aAEVV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEiB,aAAW,gBACXhB,UAAU,mCACViB,KAAK,SACLC,YAAY,gBACZC,SAAUJ,MCDHK,EARA,SAACC,GACd,OACExB,EAAAC,EAAAC,cAAA,OAAKuB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAClEJ,EAAMK,WCyBEC,cA1Bb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAWFI,YAAc,WACZP,EAAKQ,SAAS,SAAAC,GACZ,MAAO,CAACC,MAAOD,EAAMC,MAAQ,MAZ/BV,EAAKS,MAAQ,CACXC,MAAO,GAHGV,qFAMQW,EAAWC,GAC/B,OAAIT,KAAKM,MAAMC,QAAUE,EAAUF,uCAYnC,OADAhC,QAAQC,IAAI,iBAEVV,EAAAC,EAAAC,cAAA,UAAQ0C,MAAOV,KAAKV,MAAMoB,MAAOC,QAASX,KAAKI,aAA/C,WAAqEJ,KAAKM,MAAMC,cArB1DK,aCiBbC,gMAhBSL,EAAWC,GAC/B,OAAO,mCAIP,OADAlC,QAAQC,IAAI,UAEVV,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACEH,EAAAC,EAAAC,cAAC8C,EAAD,CAAeJ,MAAO,gBAVXE,aCqBNG,cApBb,SAAAA,EAAYzB,GAAO,IAAAO,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IACjBlB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAMV,KACDgB,MAAQ,CACXU,UAAU,GAHKnB,iFAODoB,EAAOC,GACvBlB,KAAKK,SAAS,CAACW,UAAU,qCAIzB,OAAIhB,KAAKM,MAAMU,SACNlD,EAAAC,EAAAC,cAAA,oCAEFgC,KAAKV,MAAMK,gBAhBKiB,aC8BrBO,qMAGFnB,KAAKV,MAAM8B,mDAKJ,IAAAC,EAEoDrB,KAAKV,MAAxDgC,EAFDD,EAECC,YAAaC,EAFdF,EAEcE,eAAgBjD,EAF9B+C,EAE8B/C,OAAQkD,EAFtCH,EAEsCG,UACvCC,EAAiBnD,EAAOoD,OAAO,SAAAC,GACnC,OAAOA,EAAMhE,KAAKiE,cAAcC,SAASP,EAAYM,iBAEvD,OACI9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAC+D,EAAD,CAAW/C,aAAcuC,IACzBzD,EAAAC,EAAAC,cAACgE,EAAD,KACGR,EAAY1D,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,WACbH,EAAAC,EAAAC,cAACiE,EAAD,KACEnE,EAAAC,EAAAC,cAACkE,EAAD,CAAU5D,OAAQmD,cArBdb,cAgCHuB,cAhDS,SAAA7B,GACtB,MAAO,CACLgB,YAAahB,EAAM8B,aAAad,YAChChD,OAAQgC,EAAM+B,cAAc/D,OAC5BkD,UAAWlB,EAAM+B,cAAcb,UAC/BP,MAAOX,EAAM+B,cAAcpB,QAGJ,SAACqB,GAC1B,MAAO,CACLf,eAAgB,SAACgB,GAAD,OAAWD,ECnBU,CAErCpD,KCV+B,sBDW/BsD,QDgBmDD,EAAME,OAAOC,SAChEtB,gBAAiB,kBAAMkB,ECbQ,SAACA,GAClCA,EAAS,CAAEpD,KCdyB,2BDepCyD,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAI,OAAIT,EAAS,CAACpD,KChBY,yBDgBkBsD,QAASO,MAC9DC,MAAM,SAAA/B,GAAK,OAAIqB,EAAS,CAACpD,KChBS,wBDgBoBsD,QAASvB,WD6CnDkB,CAA6ChB,GGvDtD8B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTZ,KAAK,SAAAgB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBxD,QACfmD,UAAUC,cAAcO,WAK1B1F,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBwE,MAAM,SAAA/B,GACL1C,QAAQ0C,MAAM,4CAA6CA,KCtEjE,IAAMiD,EAAqB,CACzB5C,YAAa,IAYT6C,EAAqB,CACzB3C,WAAW,EACXlD,OAAQ,GACR2C,MAAO,ICXHmD,SAAcC,YAAgB,CAACjC,aDDT,WAAyC,IAAxC9B,EAAwCgE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCJ,EAAoBO,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAC5D,OAAOG,EAAOvF,MACZ,IFf+B,sBEgB7B,OAAOY,OAAO4E,OAAO,GAAIpE,EAAO,CAACgB,YAAamD,EAAOjC,UACvD,QACE,OAAOlC,ICJsC+B,cDetB,WAAwC,IAAvC/B,EAAuCgE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjCH,EAAoBM,EAAaH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,GAC7D,OAAOG,EAAOvF,MACZ,IF7BkC,yBE8BhC,OAAOY,OAAO4E,OAAO,GAAIpE,EAAO,CAAEkB,WAAW,IAC/C,IF9BkC,yBE+BhC,OAAO1B,OAAO4E,OAAO,GAAI,CAAEpG,OAAQmG,EAAOjC,QAAShB,WAAW,IAChE,IF/BiC,wBEgC/B,OAAO1B,OAAO4E,OAAO,GAAIpE,EAAO,CAAEW,MAAOwD,EAAOjC,QAAShB,WAAW,IACtE,QACE,OAAOlB,OCvBPqE,EAAQC,YAAYR,EAAaS,YAAgBC,MAEvDC,IAASC,OACPlH,EAAAC,EAAAC,cAACiH,EAAA,EAAD,CAAUN,MAAOA,GACf7G,EAAAC,EAAAC,cAACkH,EAAD,OACWC,SAASC,eAAe,SFAxB,WACb,GAA6C,kBAAmB3B,UAAW,CAGzE,GADkB,IAAI4B,IAAIC,eAAwBnC,OAAOC,UAC3CmC,SAAWpC,OAAOC,SAASmC,OAIvC,OAGFpC,OAAOqC,iBAAiB,OAAQ,WAC9B,IAAMhC,EAAK,GAAApF,OAAMkH,eAAN,sBAEPrC,GAiDV,SAAiCO,GAE/Bb,MAAMa,GACHZ,KAAK,SAAAC,GAGkB,MAApBA,EAAS4C,SACuD,IAAhE5C,EAAS6C,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CnC,UAAUC,cAAcmC,MAAMjD,KAAK,SAAAgB,GACjCA,EAAakC,aAAalD,KAAK,WAC7BO,OAAOC,SAAS2C,aAKpBxC,EAAgBC,KAGnBR,MAAM,WACLzE,QAAQC,IACN,mEArEAwH,CAAwBxC,GAIxBC,UAAUC,cAAcmC,MAAMjD,KAAK,WACjCrE,QAAQC,IACN,+GAMJ+E,EAAgBC,ME3BxByC","file":"static/js/main.64904dad.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, email, id}) => {\n\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`}/>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('Cardlist')\n  return(\n      <div>\n      {  robots.map((user, i) => {\n          return(\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name} email={robots[i].email}\n            />\n          );\n        })\n      }\n      </div>\n    );\n}\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  console.log('SearchBox')\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type=\"search\"\n        placeholder=\"search Robots\"\n        onChange={searchChange}\n      />\n\n    </div>\n\n  )\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\n\nclass CounterButton extends Component {\n  constructor() {\n    super()\n    this.state = {\n      count: 0\n    }\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    if (this.state.count !== nextState.count) {\n      return true\n    }\n    return false\n  }\n  updateCount = () => {\n    this.setState(state => {\n      return {count: state.count + 1}\n    })\n  }\n  render() {\n    console.log('CounterButton')\n    return (\n      <button color={this.props.color} onClick={this.updateCount}> Count: {this.state.count}</button>\n    )\n  }\n\n}\n\nexport default CounterButton\n","import React, { Component } from 'react';\nimport CounterButton from './CounterButton'\n\nclass Header extends Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false\n  }\n  render() {\n    console.log('Header')\n    return (\n      <div>\n\n        <h1 className='f1'>RoboFriends</h1>\n          <CounterButton color={'red'}/>\n      </div>\n    )\n  }\n\n}\n\nexport default Header\n","import React, { Component } from 'react';\n\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({hasError: true})\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. That is not good</h1>\n    }\n    return this.props.children\n  }\n\n}\n\nexport default ErrorBoundry\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll';\nimport Header from '../components/Header';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './app.css';\n\nimport { setSearchField, requestRobots } from '../actions';\n\n// if (process.env.NODE_ENV !== 'production') {\n//   const {whyDidYouUpdate} = require('why-did-you-update');\n//   whyDidYouUpdate(React);\n// }\n\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n\n\n  render() {\n\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n    return (\n        <div className='tc'>\n          <Header />\n          <SearchBox searchChange={onSearchChange}/>\n          <Scroll>\n            {isPending ? <h1 className='tc'>Loading</h1> :\n            <ErrorBoundry>\n              <CardList robots={filteredRobots}/>\n            </ErrorBoundry>\n          }\n          </Scroll>\n\n        </div>\n      )\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants.js'\n\n\nexport const setSearchField = (text) => ({\n\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n  }\n)\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING })\n  fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response=> response.json())\n  .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n  .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n } from './constants.js'\n\n\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload})\n    default:\n      return state;\n  }\n}\n\nconst initialStateRobots = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\n\nexport const requestRobots = (state=initialStateRobots, action={})=> {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true})\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, { robots: action.payload, isPending: false})\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload, isPending: false})\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\n// import { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App'\nimport registerServiceWorker from './registerServiceWorker';\nimport { searchRobots, requestRobots } from './reducers'\nimport 'tachyons';\n\n// const logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}